{"version":3,"sources":["Todos.jsx","AddTodo.js","App.js","serviceWorker.js","index.js"],"names":["todos","deleteTodo","todoList","length","map","todo","className","key","id","onClick","content","AddTodo","state","handelchange","e","setState","target","value","handleSubmit","preventDefault","props","addTodo","onSubmit","this","type","onChange","Component","App","filter","Math","random","Todos","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yNA0BmBA,EAtBL,YAA2B,IAAxBA,EAAuB,EAAvBA,MAAMC,EAAiB,EAAjBA,WACbC,EAAWF,EAAMG,OACnBH,EAAMI,IAAI,SAAAC,GACN,OACI,yBAAKC,UAAU,kBAAkBC,IAAKF,EAAKG,IACvC,0BAAMC,QAAS,WAAKR,EAAWI,EAAKG,MAAOH,EAAKK,YAQxD,uBAAGJ,UAAU,UAAb,mCAER,OACI,yBAAKA,UAAU,oBACVJ,ICnBQS,E,2MACjBC,MAAQ,CACJF,QAAS,I,EAEbG,aAAe,SAACC,GACZ,EAAKC,SAAS,CACVL,QAASI,EAAEE,OAAOC,S,EAG1BC,aAAe,SAACJ,GACZA,EAAEK,iBACF,EAAKC,MAAMC,QAAQ,EAAKT,OACxB,EAAKG,SAAS,CAACL,QAAQ,M,wEAOvB,OACI,6BACI,0BAAMY,SAAUC,KAAKL,cACjB,gDACA,2BAAOM,KAAK,OAAOC,SAAUF,KAAKV,aAAcI,MAAOM,KAAKX,MAAMF,gB,GAvBjDgB,aCChBC,E,2MACnBf,MAAQ,CACNZ,MAAO,CACP,CAAEQ,GAAI,EAAGE,QAAS,iBAChB,CAAEF,GAAI,EAAGE,QAAS,qB,EAItBT,WAAW,SAACO,GACX,IAAMR,EAAM,EAAKY,MAAMZ,MAAM4B,OAAO,SAAAvB,GAClC,OAAOA,EAAKG,MAAMA,IAEpB,EAAKO,SAAS,CACZf,W,EAIHqB,QAAQ,SAAChB,GACPA,EAAKG,GAAGqB,KAAKC,SACb,IAAI9B,EAAM,GAAD,mBAAK,EAAKY,MAAMZ,OAAhB,CAAsBK,IAC/B,EAAKU,SAAS,CACVf,MAAMA,K,wEAOV,OACE,yBAAKM,UAAU,sBAEjB,wBAAIA,UAAU,oBAAd,UACD,kBAACyB,EAAD,CAAO/B,MAAOuB,KAAKX,MAAMZ,MAAOC,WAAYsB,KAAKtB,aAEjD,kBAAC,EAAD,CAASoB,QAASE,KAAKF,e,GAlCOK,aCSbM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,gB","file":"static/js/main.f60ea84d.chunk.js","sourcesContent":["\n\nimport React from 'react'\n\nconst todos = ({ todos,deleteTodo }) => {\n    const todoList = todos.length ? (\n        todos.map(todo => {\n            return (\n                <div className=\"collection-item\" key={todo.id} >\n                    <span onClick={()=>{deleteTodo(todo.id)}}>{todo.content}</span>\n                </div>\n\n            )\n        }\n\n        )\n    ) : (\n            <p className=\"center\"> You have no todo's left , yay1</p>\n        )\n    return (\n        <div className='todos collection'>\n            {todoList}\n        </div>\n    )\n}\n\n    export default todos;","import React, { Component } from 'react'\n\nexport default class AddTodo extends Component {\n    state = {\n        content: ''\n    }\n    handelchange = (e) => {\n        this.setState({\n            content: e.target.value\n        })\n    }\n    handleSubmit = (e) => {\n        e.preventDefault()\n        this.props.addTodo(this.state)\n        this.setState({content:''})\n\n    }\n\n  x\n\n    render() {\n        return (\n            <div>\n                <form onSubmit={this.handleSubmit}>\n                    <label>Add new todo:</label>\n                    <input type=\"text\" onChange={this.handelchange} value={this.state.content} />\n\n                </form>\n            </div>\n        )\n    }\n}\n","import React, { Component } from 'react'\nimport Todos from './Todos'\nimport AddTodo from './AddTodo'\nexport default class App extends Component {\n  state = {\n    todos: [\n    { id: 1, content: 'buy some milk' },\n      { id: 2, content: 'play mario kart' },\n    ]\n  }\n\n  deleteTodo=(id)=>{\n   const todos=this.state.todos.filter(todo=>{\n     return todo.id===!id\n   });\n   this.setState({\n     todos\n   })\n  }\n\n  addTodo=(todo)=>{\n    todo.id=Math.random();\n    let todos=[...this.state.todos,todo];\n    this.setState({\n        todos:todos\n    })\n\n\n   }\n\n  render() {\n    return (\n      <div className='todo-app container'>\n    \n    <h1 className='center blue-text'>Todo's</h1>\n   <Todos todos={this.state.todos} deleteTodo={this.deleteTodo} />\n\n   <AddTodo addTodo={this.addTodo} />\n\n\n      </div>\n    )\n  }\n}\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}